name: Automate Assets Creation

on:
  repository_dispatch:
    types: [created]

jobs:
  automate-issue-and-milestone-creation:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Installation Token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APPLICATION_ID }}
          private_key: ${{ secrets.GH_APPLICATION_KEY }}

      - name: Fetch Draft Issues from Template
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data: draftIssues } = await github.issues.listForRepo({
              owner: 'humanbit-dev-org',
              repo: 'humanbit-templates',
              state: 'open',
              filter: 'draft'
            });
            return draftIssues;

      - name: Fetch Milestones from Template
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data: milestones } = await github.issues.listMilestones({
              owner: 'humanbit-dev-org',
              repo: 'humanbit-templates'
            });
            return milestones;

      - name: Fetch Labels from Template
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data: labels } = await github.issues.listLabelsForRepo({
              owner: 'humanbit-dev-org',
              repo: 'humanbit-templates'
            });
            return labels;

      - name: Create Issues in New Repository
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const draftIssues = ${{ steps.fetch-draft-issues.outputs.result }};
            for (const issue of draftIssues) {
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issue.title,
                body: issue.body,
                assignees: issue.assignees.map(assignee => assignee.login),
                labels: issue.labels.map(label => label.name),
              });
            }

      - name: Create Milestones in New Repository
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const milestones = ${{ steps.fetch-milestones.outputs.result }};
            for (const milestone of milestones) {
              await github.issues.createMilestone({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: milestone.title,
                description: milestone.description,
                due_on: milestone.due_on
              });
            }

      - name: Create Labels in New Repository
        uses: actions/github-script@v4
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const labels = ${{ steps.fetch-labels.outputs.result }};
            for (const label of labels) {
              await github.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label.name,
                color: label.color
              });
            }
